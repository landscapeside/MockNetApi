if (isLibModule.toBoolean()) {
  apply plugin: 'com.android.library'
} else {
  apply plugin: 'com.android.application'
}
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.landscapeside'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion

  defaultConfig {
    if (!isLibModule.toBoolean()) {
      applicationId "com.landscape.mocknetapi"
    }
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.appVersion
    versionName rootProject.ext.appVersionName
    flavorDimensions "${rootProject.ext.appVersion}"
    if (!isLibModule.toBoolean()) {
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  productFlavors{
    mockMode{

    }
    internal{}

  }


  sourceSets {
    main {
      if (isLibModule.toBoolean()) {
        manifest.srcFile 'src/libModule/AndroidManifest.xml'
      } else {
        manifest.srcFile 'src/main/AndroidManifest.xml'
      }
    }
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  if (isLibModule.toBoolean()) {
  } else {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
      exclude group: 'com.android.support', module: 'support-annotations'
    })
  }
  api "com.android.support:appcompat-v7:$SupportVersion"
  testImplementation 'junit:junit:4.12'
  api 'com.google.code.gson:gson:2.6.2'
  api 'com.github.orhanobut:logger:1.12'

  api "io.reactivex.rxjava2:rxandroid:$rxjavaAndroidVersion"
  api "io.reactivex.rxjava2:rxjava:$rxjavaVersion"

  api "com.squareup.retrofit2:converter-gson:$converterGsonVersion"
  api "com.squareup.retrofit2:retrofit:$retrofitVersion"
  api "com.squareup.retrofit2:adapter-rxjava2:$retrofitRxAdatperVersion"
}
